%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% LEAGUEEXPORTHTML.M — Fixed flags relative to root (/flags)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
function mainFile = LeagueExportHTML(Tsum, params, meta)
templatePath = fullfile('templates','template_main.html');
if ~isfile(templatePath)
    error('Missing template: %s', templatePath);
end

mainFile = fullfile(meta.outputFolder, 'league_summary.html');
templateText = fileread(templatePath);

numFields = {'Games','Wins','Losses','WinRate','MeanPR','HighestPR','LowestPR','OppMeanPR','Luck'};
for f = 1:numel(numFields)
    v = Tsum.(numFields{f});
    minMax.(numFields{f}) = [min(v), max(v)];
end
colorFn = @(val,minv,maxv,invert) sprintf('#%02X%02X00', ...
    uint8(255 * (invert * (val - minv)/max(maxv - minv,1e-9) + (1-invert)*(1 - (val - minv)/max(maxv - minv,1e-9)))), ...
    uint8(255 * ((1-invert)*(val - minv)/max(maxv - minv,1e-9) + invert*(1 - (val - minv)/max(maxv - minv,1e-9)))));

tableRows = '';
for i = 1:height(Tsum)
    player = Tsum.Player(i);
    flagCode = meta.FlagCodesSorted{i};

    if i==1, rankColor='var(--color-gold)';
    elseif i==2, rankColor='var(--color-silver)';
    elseif i>=3 && i<3+params.BronzeCount, rankColor='var(--color-bronze)';
    else, rankColor='transparent'; end

    % >>> Fixed: flags now from root ../../flags
    row = sprintf('<tr><td style="background-color:%s;"><b>%d</b></td>',rankColor,i);
    row = [row sprintf(['<td class="player" data-name="%s" style="background-color:%s;">' ...
                        '<img class="flag" src="../../flags/%s.png"> ' ...
                        '<b><a href="players/%s.html">%s</a></b></td>'], ...
                        player, rankColor, flagCode, player, player)];

    for f = 3:width(Tsum)
        colName = Tsum.Properties.VariableNames{f};
        val = Tsum.(colName)(i);
        mm = minMax.(colName);
        invert = ismember(colName, {'Losses','MeanPR','HighestPR','LowestPR'});
        c = colorFn(val, mm(1), mm(2), invert);
        if abs(val-mm(1))<1e-9 || abs(val-mm(2))<1e-9, b1='<b>'; b2='</b>'; else, b1=''; b2=''; end
        if ismember(colName, {'Games','Wins','Losses'}), fmt='%.0f';
        elseif strcmp(colName,'WinRate'), fmt='%.2f%%'; val=val*100;
        else, fmt='%.2f'; end
        row = [row sprintf('<td style="color:%s;">%s', c, b1) sprintf(fmt,val) sprintf('%s</td>', b2)];
    end
    tableRows = [tableRows row '</tr>' newline];
end

avgRow = '<tr class="avgRow"><td colspan="2"><b>AVERAGES</b></td>';
for f=3:width(Tsum)
    col=Tsum.Properties.VariableNames{f};
    if isnumeric(Tsum.(col))
        if strcmp(col,'WinRate'), avgRow=[avgRow sprintf('<td><b>%.2f%%</b></td>',mean(Tsum.(col))*100)];
        else, avgRow=[avgRow sprintf('<td><b>%.2f</b></td>',mean(Tsum.(col)))];
        end
    else, avgRow=[avgRow '<td></td>'];
    end
end
avgRow=[avgRow '</tr>'];

playedMatches=meta.playedMatches;
totalMatches=meta.totalMatches;
playedRatio=meta.playedRatio*100;
statRow=sprintf('<tr class="statRow"><td colspan="11" style="text-align:center;">Games Played: %d / %d (%.1f%%)</td></tr>',playedMatches,totalMatches,playedRatio);

htmlOut = templateText;
htmlOut = strrep(htmlOut,'{{LEAGUE_TITLE}}',params.LeagueTitle);
htmlOut = strrep(htmlOut,'{{TABLE_BODY}}',[tableRows avgRow statRow]);
htmlOut = strrep(htmlOut,'{{UPDATED_TIME}}',meta.TimeStamp);

backHTML = '<p style="text-align:center; margin-top:10px;"><a href="../index.html" style="color:black; text-decoration:none;">⬅ Back to All Leagues</a></p>';
htmlOut = strrep(htmlOut,'{{BACK_LINK}}',backHTML);

fid = fopen(mainFile,'w','n','UTF-8');
fwrite(fid,htmlOut);
fclose(fid);
fprintf(' League summary generated: %s\n', mainFile);
end
